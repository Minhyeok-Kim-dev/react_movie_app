{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","prototype","PropTypes","string","isRequired","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","async","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VA8BA,SAASA,EAAT,GAAqC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC5B,OACE,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAItD,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACnB,OACE,0BAAMF,UAAU,gBAAgBE,EAAhC,KAgBJD,EAAWE,UAAW,CACpBD,MAAOE,IAAUC,OAAOC,YAGXC,MArDf,YAAmD,IAAnCR,EAAkC,EAAlCA,MAAOH,EAA2B,EAA3BA,OAAQY,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACrC,OACE,yBAAKT,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEpC,yBAAKC,UAAU,iBACb,4BAAKD,GACL,yBAAKC,UAAU,iBACZQ,EAAOE,KAAI,SAACR,EAAOS,GAAR,OAAkB,kBAACV,EAAD,CAAYC,MAAOA,EAAOU,IAAKD,QAE/D,yBAAKX,UAAU,mBACb,kBAAC,IAAD,CACEa,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCkCLC,E,2MA9CbC,MAAQ,G,EAMRC,cAAgB,WAWd,OAVe,EAAKD,MAAME,OAAOX,KAAI,SAAAY,GACnC,OAAO,kBAAC,EAAD,CACLvB,MAAOuB,EAAMC,cACb3B,OAAQ0B,EAAME,mBACdhB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,SAChBG,IAAKU,EAAMG,S,EAOjBC,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACU,EAAKE,YADf,OACLR,EADK,OAEX,EAAKS,SAAS,CACZT,WAHS,sC,EAObQ,SAAW,WACT,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,OAAOA,EAAKC,KAAKd,UAElBe,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFA9B1BG,KAAKd,e,+BAiCG,IACAL,EAAWmB,KAAKrB,MAAhBE,OACR,OACE,yBAAKrB,UAAWqB,EAAS,MAAQ,gBAC9BmB,KAAKrB,MAAME,OAASmB,KAAKpB,gBAAkB,e,GA9ClCqB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.581da6eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} alt={title}/>\r\n      </div>\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis='...'\r\n            trimRight\r\n            basedOn='letters'\r\n            />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n  return (\r\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n  )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n  return (\r\n    <span className=\"Movie__Genre\">{genre} </span>\r\n  )\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.prototype ={\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n\r\n  // # Component Lifecycle\r\n  // - Render: componentWillMount() -> render() -> componentDidMount()\r\n  // - Update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\r\n  \r\n  state = {}\r\n\r\n  componentDidMount() {\r\n    this._getMovies();\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie => {\r\n      return <Movie \r\n        title={movie.title_english} \r\n        poster={movie.medium_cover_image} \r\n        genres={movie.genres} \r\n        synopsis={movie.synopsis}\r\n        key={movie.id} \r\n      />\r\n    })\r\n\r\n    return movies\r\n  }\r\n\r\n  _getMovies = async () =>{\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')  // ajax 호출\r\n    .then(response => response.json())  // .json() -> json변환\r\n    .then(json => {\r\n      return json.data.movies\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {this.state.movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}